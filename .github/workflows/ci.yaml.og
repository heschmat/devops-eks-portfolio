name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'README*'
      - 'k8s/**'
      - 'helm/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Run Go Lint
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Run Go Tests
        run: go test ./...

  docker:
    needs: [lint, test]
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.set-env.outputs.image_name }}
      image_tag: ${{ steps.set-env.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image env variables
        id: set-env
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          IMAGE_NAME="ghcr.io/${{ vars.GH_USERNAME }}/$REPO_NAME"
          IMAGE_TAG="${{ github.ref_name }}-$SHORT_SHA"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Docker auth for ghcr.io
        run: echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u "${{ vars.GH_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Push Docker Image
        run: docker push $IMAGE_NAME:$IMAGE_TAG

  scan-image:
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - name: Login to the ghcr.io
        run: echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u "${{ vars.GH_USERNAME }}" --password-stdin

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan Docker Image for vulnerabilities
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL ${{needs.docker.outputs.image_name}}:${{needs.docker.outputs.image_tag}}

  update-helm:
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Update image tag in values.yaml
        run: |
          sed -i 's|tag:.*|tag: "${{ needs.docker.outputs.image_tag }}"|' helm/go-static-app/values.yaml

      - name: Commit the updated values.yaml
        run: |
          git config user.name "GHA bot"
          git config user.email "actions@github.com"
          git add helm/go-static-app/values.yaml
          git commit -m "[ci] update image tag to ${{ needs.docker.outputs.image_tag }} (triggered by: ${{ github.actor }})"
          git push
